// Code generated by MockGen. DO NOT EDIT.
// Source: ./service/db/repository.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	models "github.com/adruzhkin/atm-service-golang/service/models"
	gomock "github.com/golang/mock/gomock"
)

// MockRepo is a mock of Repo interface.
type MockRepo struct {
	ctrl     *gomock.Controller
	recorder *MockRepoMockRecorder
}

// MockRepoMockRecorder is the mock recorder for MockRepo.
type MockRepoMockRecorder struct {
	mock *MockRepo
}

// NewMockRepo creates a new mock instance.
func NewMockRepo(ctrl *gomock.Controller) *MockRepo {
	mock := &MockRepo{ctrl: ctrl}
	mock.recorder = &MockRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepo) EXPECT() *MockRepoMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockRepo) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockRepoMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockRepo)(nil).Close))
}

// CreateCustomer mocks base method.
func (m *MockRepo) CreateCustomer(c *models.Customer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCustomer", c)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateCustomer indicates an expected call of CreateCustomer.
func (mr *MockRepoMockRecorder) CreateCustomer(c interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCustomer", reflect.TypeOf((*MockRepo)(nil).CreateCustomer), c)
}

// CreateTransaction mocks base method.
func (m *MockRepo) CreateTransaction(tx *models.Transaction) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTransaction", tx)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateTransaction indicates an expected call of CreateTransaction.
func (mr *MockRepoMockRecorder) CreateTransaction(tx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTransaction", reflect.TypeOf((*MockRepo)(nil).CreateTransaction), tx)
}

// GetAccountByID mocks base method.
func (m *MockRepo) GetAccountByID(id int) (*models.Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccountByID", id)
	ret0, _ := ret[0].(*models.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccountByID indicates an expected call of GetAccountByID.
func (mr *MockRepoMockRecorder) GetAccountByID(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccountByID", reflect.TypeOf((*MockRepo)(nil).GetAccountByID), id)
}

// GetCustomerByCredentials mocks base method.
func (m *MockRepo) GetCustomerByCredentials(crd *models.CustomerCredentials) (*models.Customer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCustomerByCredentials", crd)
	ret0, _ := ret[0].(*models.Customer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCustomerByCredentials indicates an expected call of GetCustomerByCredentials.
func (mr *MockRepoMockRecorder) GetCustomerByCredentials(crd interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCustomerByCredentials", reflect.TypeOf((*MockRepo)(nil).GetCustomerByCredentials), crd)
}

// GetCustomerByEmail mocks base method.
func (m *MockRepo) GetCustomerByEmail(email string) (*models.Customer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCustomerByEmail", email)
	ret0, _ := ret[0].(*models.Customer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCustomerByEmail indicates an expected call of GetCustomerByEmail.
func (mr *MockRepoMockRecorder) GetCustomerByEmail(email interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCustomerByEmail", reflect.TypeOf((*MockRepo)(nil).GetCustomerByEmail), email)
}

// GetTransactionsBalanceByAccountID mocks base method.
func (m *MockRepo) GetTransactionsBalanceByAccountID(id int) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTransactionsBalanceByAccountID", id)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTransactionsBalanceByAccountID indicates an expected call of GetTransactionsBalanceByAccountID.
func (mr *MockRepoMockRecorder) GetTransactionsBalanceByAccountID(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTransactionsBalanceByAccountID", reflect.TypeOf((*MockRepo)(nil).GetTransactionsBalanceByAccountID), id)
}

// GetTransactionsByAccountID mocks base method.
func (m *MockRepo) GetTransactionsByAccountID(id int) ([]models.Transaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTransactionsByAccountID", id)
	ret0, _ := ret[0].([]models.Transaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTransactionsByAccountID indicates an expected call of GetTransactionsByAccountID.
func (mr *MockRepoMockRecorder) GetTransactionsByAccountID(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTransactionsByAccountID", reflect.TypeOf((*MockRepo)(nil).GetTransactionsByAccountID), id)
}

// Open mocks base method.
func (m *MockRepo) Open() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Open")
	ret0, _ := ret[0].(error)
	return ret0
}

// Open indicates an expected call of Open.
func (mr *MockRepoMockRecorder) Open() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Open", reflect.TypeOf((*MockRepo)(nil).Open))
}

// Ping mocks base method.
func (m *MockRepo) Ping() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Ping")
	ret0, _ := ret[0].(error)
	return ret0
}

// Ping indicates an expected call of Ping.
func (mr *MockRepoMockRecorder) Ping() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ping", reflect.TypeOf((*MockRepo)(nil).Ping))
}
